{{- $gpuCount := .Values.gpuCount -}}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "tensorflow-serving.fullname" . }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: {{ template "tensorflow-serving.chart" . }}
    app: {{ template "tensorflow-serving.name" . }}
    servingName: "{{ .Values.servingName }}"
    servingType: "tf-serving"
    serviceName: "{{ .Values.servingName }}"
    serviceVersion: "{{ .Values.servingVersion }}"
  annotations:
    "helm.sh/created": {{ .Release.Time.Seconds | quote }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      app: {{ template "tensorflow-serving.name" . }} 
  template:
    metadata:
      {{- if eq .Values.enableIstio true }}
      annotations:
        sidecar.istio.io/inject: "true"
      {{- end }}
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: {{ template "tensorflow-serving.chart" . }}
        app: {{ template "tensorflow-serving.name" . }}
        serviceName: "{{ .Values.servingName }}"
        serviceVersion: "{{ .Values.servingVersion }}"
    spec:
      initContainers:

      containers:
        - name: serving
          {{- if .Values.image }}
          image: "{{ .Values.image }}"
          {{- end }}
          {{- if .Values.imagePullPolicy }}
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          {{- end }}
          env:
          {{- if .Values.envs }}
          {{- range $key, $value := .Values.envs }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
          {{- end }}
          {{- end }}
          {{- if ne .Values.command "" }}
          command:
          - "sh"
          - "-c"
          - "{{ .Values.command }}"
          {{- else }}
          command:
            - "/usr/bin/tensorflow_model_server"
          args:
            - "--port={{ .Values.port }}"
            {{- if .Values.rest_api_port }}
            - "--rest_api_port={{ .Values.rest_api_port }}"
            {{- end }}
            {{- if ne .Values.modelConfigFileContent "" }}
            - "--model_config_file=/tmp/config"
            {{- end }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.port }}
              name: serving
              protocol: TCP
            - containerPort: {{ .Values.rest_api_port }}
              name: http-serving
          readinessProbe:
            tcpSocket:
              port: serving
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              {{- if .Values.cpu }}
              cpu: {{ .Values.cpu }}
              {{- end }}
              {{- if .Values.memory }}
              memory: {{ .Values.memory }}
              {{- end }}
              {{- if gt (int $gpuCount) 0}}
              nvidia.com/gpu: {{ .Values.gpuCount }}
              {{- end }}
          volumeMounts:
            {{- if .Values.modelDirs }}
            {{- range $pvcName, $destPath := .Values.modelDirs}}
            - name: "{{ $pvcName }}"
              mountPath: "{{ $destPath }}"
            {{- end }}
            {{- end }}
            {{- if ne .Values.modelConfigFileContent "" }}
            - name: config
              mountPath: /tmp
            {{- end }}
      volumes:
        {{- if .Values.modelDirs }}
        {{- range $pvcName, $destPath := .Values.modelDirs}}
        - name: "{{ $pvcName }}"
          persistentVolumeClaim:
            claimName: "{{ $pvcName }}"
        {{- end }}
        {{- end }}
        - name: config
          configMap:
            name: {{ template "tensorflow-serving.fullname" . }}-cm
            items:
            - key: modelConfigFileContent
              path: config
